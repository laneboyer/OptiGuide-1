
import gurobipy as gp
from gurobipy import GRB

commodities = ['JP5', 'Diesel']
nodes = ['JBPHH', 'NAVBASE-SD', 'NAVBASE-GUAM', 'NAVBASE-SYDNEY', 'NAVBASE-PHP']

arcs, capacity = gp.multidict({
    ('JBPHH', 'NAVBASE-GUAM'):   200,
    ('JBPHH', 'NAVBASE-SYDNEY'):  80,
    ('JBPHH', 'NAVBASE-PHP'):  120,
    ('NAVBASE-SD',  'NAVBASE-GUAM'):   100,
    ('NAVBASE-SD',  'NAVBASE-SYDNEY'): 80,
    ('NAVBASE-SD',  'NAVBASE-PHP'):  80})

cost = {
    ('JP5', 'JBPHH', 'NAVBASE-GUAM'):   10,
    ('JP5', 'JBPHH', 'NAVBASE-SYDNEY'): 20,
    ('JP5', 'JBPHH', 'NAVBASE-PHP'):  60,
    ('JP5', 'NAVBASE-SD',  'NAVBASE-GUAM'):   40,
    ('JP5', 'NAVBASE-SD',  'NAVBASE-SYDNEY'): 40,
    ('JP5', 'NAVBASE-SD',  'NAVBASE-PHP'):  30,
    ('Diesel',    'JBPHH', 'NAVBASE-GUAM'):   20,
    ('Diesel',    'JBPHH', 'NAVBASE-SYDNEY'): 20,
    ('Diesel',    'JBPHH', 'NAVBASE-PHP'):  80,
    ('Diesel',    'NAVBASE-SD',  'NAVBASE-GUAM'):   60,
    ('Diesel',    'NAVBASE-SD',  'NAVBASE-SYDNEY'): 70,
    ('Diesel',    'NAVBASE-SD',  'NAVBASE-PHP'):  30}

inflow = {
    ('JP5', 'JBPHH'):   50,
    ('JP5', 'NAVBASE-SD'):    60,
    ('JP5', 'NAVBASE-GUAM'):   -50,
    ('JP5', 'NAVBASE-SYDNEY'): -50,
    ('JP5', 'NAVBASE-PHP'):  -10,
    ('Diesel',    'JBPHH'):   60,
    ('Diesel',    'NAVBASE-SD'):    40,
    ('Diesel',    'NAVBASE-GUAM'):   -40,
    ('Diesel',    'NAVBASE-SYDNEY'): -30,
    ('Diesel',    'NAVBASE-PHP'):  -30}

# OPTIGUIDE DATA CODE GOES HERE
m = gp.Model('netflow')
model = m

flow = m.addVars(commodities, arcs, obj=cost, name="flow")

m.addConstrs(
    (flow.sum('*', i, j) <= capacity[i, j] for i, j in arcs), "cap")



m.addConstrs(
    (flow.sum(h, '*', j) + inflow[h, j] == flow.sum(h, j, '*')
        for h in commodities for j in nodes), "node")


m.optimize()

# OPTIGUIDE CONSTRAINT CODE GOES HERE

m.update()
m.optimize()

if m.Status == GRB.OPTIMAL:
    solution = m.getAttr('X', flow)
    for h in commodities:
        print('\nOptimal flows for %s:' % h)
        for i, j in arcs:
            if solution[h, i, j] > 0:
                print('%s -> %s: %g' % (i, j, solution[h, i, j]))